import numpy as np

configfile: "config/config.yaml"

l = np.arange(0, config['SLICES'])
SLICES = list((l - np.floor(len(l)/2)).astype('int8'))

rule all:
    input:
        expand(["N_{N_points}_seed_{seed}_label.png","N_{N_points}_seed_{seed}_average+noise.png"],
               N_points=config['N_POINTS'],
               seed=config['SEEDS'])
    output:
        "END-OF-PIPELINE.txt"
    shell:
        "touch {output}"

rule crop_label:
    input:
        "N_{N_points}_seed_{seed}_label_uncropped.png"
    output:
        "N_{N_points}_seed_{seed}_label.png"
    script:
        "scripts/rule_crop_label.py"

rule add_noise:
    input:
        "N_{N_points}_seed_{seed}_average_blurr.png",
        "N_{N_points}_seed_{seed}_noise.png"
    output:
        "N_{N_points}_seed_{seed}_average+noise.png"
    script:
        "scripts/rule_add_noise.py"

rule make_average:
    input:
        expand("N_{{N_points}}_seed_{{seed}}_sl_{sl}.png", sl = SLICES)
    output:
        "N_{N_points}_seed_{seed}_average.png"
    script:
        "scripts/rule_make_average.py"

rule make_sections:
    output:
        expand("N_{{N_points}}_seed_{{seed}}_sl_{sl}.png", sl = SLICES),
        "N_{N_points}_seed_{seed}_label_uncropped.png"
    benchmark:
        "benchmarks/N_{N_points}_seed_{seed}3_sections_benchmark.txt"
    script:
        "scripts/rule_make_sections.py"

rule make_noise:
    output:
        "N_{N_points}_seed_{seed}_noise.png"
    script:
        "scripts/rule_make_noise.py"

rule gauss_filter:
    input:
        "N_{N_points}_seed_{seed}_average.png"
    output:
        "N_{N_points}_seed_{seed}_average_blurr.png"
    script:
        "scripts/rule_gauss_filter.py"
